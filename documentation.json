{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "LoginModalService",
            "id": "injectable-LoginModalService-c6da17c14377ae32a8afebee5bc1c472ed71e97aa4aa3709f50860ec9b37c8085c31f81336fecf5f04ba02aea0a5ee4b0311b6ed1ae2d455e61932439d939acb",
            "file": "src/app/services/login-modal.service.ts",
            "properties": [
                {
                    "name": "isActive$",
                    "defaultValue": "this.isActiveSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "isActiveSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMethod to close the login modal",
                    "description": "<p>Method to close the login modal</p>\n"
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nMethod to open the login modal",
                    "description": "<p>Method to open the login modal</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginModalService {\r\n  private isActiveSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  isActive$ = this.isActiveSubject.asObservable();\r\n\r\n  /** Method to open the login modal */\r\n  open() {\r\n    this.isActiveSubject.next(true);\r\n  }\r\n\r\n  /** Method to close the login modal */\r\n  close() {\r\n    this.isActiveSubject.next(false);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4f7aefafe10a024c061d373541d243700a6bf8efbed8a143da3a4d6bf7bedbb9224c7739bbcd9821d177f63ff70ad12b26d2115b173c84faef6d31ee721e95f4",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loggedIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocialUser",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "SocialLoginModule",
                    "type": "module"
                },
                {
                    "name": "LoginComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {  SocialAuthService, SocialLoginModule, SocialUser } from '@abacritt/angularx-social-login';\r\nimport { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { LoginComponent } from \"./components/login/login.component\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet, SocialLoginModule, LoginComponent],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.sass'\r\n})\r\nexport class AppComponent {\r\n  constructor(private authService: SocialAuthService) {}\r\n\r\n  user!: SocialUser;\r\n  loggedIn!: boolean;\r\n\r\n  ngOnInit(): void {\r\n    this.authService.authState.subscribe((user) => {\r\n      this.user = user;\r\n      this.loggedIn = (user != null);\r\n    });\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./app.component.sass",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "SocialAuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "SocialAuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<header></header>\r\n<router-outlet></router-outlet>\r\n<footer></footer>\r\n"
        },
        {
            "name": "BaseModalComponent",
            "id": "component-BaseModalComponent-16471228a9d1a646fb079c0ddd1ffdde5e495459a498fd1ad4fd21ac558c465c8a71a22c93676d7bf6cd31b98e875253ce12bbe2ac8353361e80b8fc7d25a178",
            "file": "src/app/modals/base-modal/base-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-base-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./base-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cancelButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nShould it have a cancel button?",
                    "description": "<p>Should it have a cancel button?</p>\n",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closeButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nShould it have a close button?",
                    "description": "<p>Should it have a close button?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs the modal currently active?",
                    "description": "<p>Is the modal currently active?</p>\n",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "okButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nShould it have an ok button?",
                    "description": "<p>Should it have an ok button?</p>\n",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCancel",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional cancel handler",
                    "description": "<p>Optional cancel handler</p>\n",
                    "line": 43,
                    "type": "EventEmitter"
                },
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional close handler",
                    "description": "<p>Optional close handler</p>\n",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "onOk",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional ok handler",
                    "description": "<p>Optional ok handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "iconClose",
                    "defaultValue": "faClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "onCloseModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ButtonComponent } from \"../../components/button/button.component\";\r\nimport { FontAwesomeModule } from \"@fortawesome/angular-fontawesome\";\r\nimport { faClose } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n@Component({\r\n  selector: 'app-base-modal',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent, FontAwesomeModule],\r\n  templateUrl: './base-modal.component.html',\r\n  styleUrl: './base-modal.component.sass'\r\n})\r\nexport class BaseModalComponent {\r\n  iconClose = faClose;\r\n\r\n  /** Is the modal currently active? */\r\n  @Input()\r\n  isActive: boolean = false;\r\n\r\n  /** Should it have a close button? */\r\n  @Input()\r\n  closeButton: boolean = false;\r\n\r\n  /** Should it have an ok button? */\r\n  @Input()\r\n  okButton: boolean = false;\r\n\r\n  /** Should it have a cancel button? */\r\n  @Input()\r\n  cancelButton: boolean = false;\r\n\r\n  /** Optional close handler */\r\n  @Output()\r\n  onClose = new EventEmitter<Event>();\r\n\r\n  /** Optional ok handler */\r\n  @Output()\r\n  onOk = new EventEmitter<Event>();\r\n\r\n  /** Optional cancel handler */\r\n  @Output()\r\n  onCancel = new EventEmitter<Event>();\r\n\r\n  onCloseModal() {\r\n    this.isActive = false;\r\n  }\r\n}\r\n",
            "styleUrl": "./base-modal.component.sass",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div [ngStyle]=\"{ 'display': isActive ? 'flex' : 'none' }\">\r\n  <div>\r\n    <div *ngIf=\"closeButton\" class=\"close\" (click)=\"onClose.emit($event); onCloseModal()\"><fa-icon [icon]=\"iconClose\"></fa-icon></div>\r\n    <ng-content></ng-content>\r\n    <div *ngIf=\"cancelButton || okButton\" class=\"interactions\">\r\n      <div *ngIf=\"cancelButton\">\r\n        <app-button\r\n          [label]=\"'cancel'\"\r\n          [fill]=\"true\"\r\n          (onClick)=\"onCancel.emit($event); onCloseModal()\"\r\n        ></app-button>\r\n      </div>\r\n      <div *ngIf=\"okButton\">\r\n        <app-button\r\n          [label]=\"'ok'\"\r\n          [variant]=\"'secondary'\"\r\n          [fill]=\"true\"\r\n          (onClick)=\"onOk.emit($event); onCloseModal()\"\r\n        ></app-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c41df1179579bac9d0feb31e38f92f143c4552688b259a23232441b20a89cf6706392c05747409222281b189bf21d70a29f0dd4dd9f26de44b6b35fb8827bab3",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fill",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFill all available content with the button",
                    "description": "<p>Fill all available content with the button</p>\n",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 735,
                            "end": 749,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 736,
                                "end": 744,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 23,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nStyling variant of the button",
                    "description": "<p>Styling variant of the button</p>\n",
                    "line": 14,
                    "type": "\"primary\" | \"secondary\" | \"light\" | \"header\" | \"minimalist\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.sass'\r\n})\r\nexport class ButtonComponent {\r\n  /** Styling variant of the button */\r\n  @Input()\r\n  variant: 'primary'\r\n    | 'secondary'\r\n    | 'light'\r\n    | 'header'\r\n    | 'minimalist'\r\n    = 'primary';\r\n\r\n  /** How large should the button be? */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /** Fill all available content with the button */\r\n  @Input()\r\n  fill: boolean = false;\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /** Optional click handler */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    let classes = ['labdt-button', this.size, this.variant];\r\n    if (this.fill) {\r\n      classes.push('fill');\r\n    }\r\n    return classes;\r\n  }\r\n}\r\n",
            "styleUrl": "./button.component.sass",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 41
                    }
                }
            },
            "templateData": "<button\r\n  type=\"button\"\r\n  (click)=\"onClick.emit($event)\"\r\n  [ngClass]=\"classes\"\r\n>\r\n  <span>{{ label }}</span>\r\n</button>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-9170bba9359f88edaf611131ee1ad40cd58d8fa344044a3c74b6627472733ad301b9c651300516f015183308225f571245fae59db51b99bf98f13820cc25b864",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onOpenLoginModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "LogoComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { LogoComponent } from \"../logo/logo.component\";\r\nimport { ButtonComponent } from \"../button/button.component\";\r\nimport { LoginModalService } from '../../services/login-modal.service';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  standalone: true,\r\n  imports: [LogoComponent, ButtonComponent],\r\n  templateUrl: './header.component.html',\r\n  styleUrl: './header.component.sass'\r\n})\r\nexport class HeaderComponent {\r\n\r\n  constructor(private loginModalService: LoginModalService) {}\r\n\r\n  onOpenLoginModal() {\r\n    this.loginModalService.open();\r\n  }\r\n}\r\n",
            "styleUrl": "./header.component.sass",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginModalService",
                        "type": "LoginModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "loginModalService",
                        "type": "LoginModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div>\r\n  <div>\r\n    <app-logo></app-logo>\r\n  </div>\r\n  <div class=\"navbar\">\r\n    <app-button\r\n      [label]=\"'Home'\"\r\n      [variant]=\"'minimalist'\"\r\n    ></app-button>\r\n    <app-button\r\n      [label]=\"'Design Thinking'\"\r\n      [variant]=\"'minimalist'\"\r\n    ></app-button>\r\n    <app-button\r\n      [label]=\"'Sign In'\"\r\n      [variant]=\"'header'\"\r\n      (onClick)=\"onOpenLoginModal()\"\r\n    ></app-button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-1f9b89ec7d3dd743ee7a1372e36f7c50ed72ab0b31dec5b90203f62a5d83eae74e11d74e0a0ee4d29b83245dff9fd9be3b10a61eaeb8b024e03e0776b3d25ba0",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "LoginModalComponent",
                    "type": "component"
                },
                {
                    "name": "LoginComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { HeaderComponent } from \"../../components/header/header.component\";\r\nimport { LoginModalComponent } from \"../../modals/login-modal/login-modal.component\";\r\nimport { LoginComponent } from \"../../components/login/login.component\";\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  standalone: true,\r\n  imports: [HeaderComponent, LoginModalComponent, LoginComponent],\r\n  templateUrl: './home.component.html',\r\n  styleUrl: './home.component.sass'\r\n})\r\nexport class HomeComponent {\r\n\r\n}\r\n",
            "styleUrl": "./home.component.sass",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\r\n  <app-login-modal></app-login-modal>\r\n  <img src=\"/images/blob_01.svg\" alt=\"Blob 01\" class=\"blob-01\">\r\n  <img src=\"/images/blob_02.svg\" alt=\"Blob 02\" class=\"blob-02\">\r\n  <app-header></app-header>\r\n</div>\r\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-3371026e4c72d89d18ac08e5f2609b086a10c3f52f0c4e72361dc65d05749d175f6dd2d6edafff111179fc46911c8b8e3ad6e0c1b2a9d9388e124df5836703e6",
            "file": "src/app/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional label",
                    "description": "<p>Optional label</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional placeholder",
                    "description": "<p>Optional placeholder</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInput variant",
                    "description": "<p>Input variant</p>\n",
                    "line": 15,
                    "type": "\"text\" | \"email\" | \"password\" | \"search\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputId",
                    "defaultValue": "`input-${uuidv4()}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n@Component({\r\n  selector: 'app-input',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './input.component.html',\r\n  styleUrl: './input.component.sass'\r\n})\r\nexport class InputComponent {\r\n  /** Input variant */\r\n  @Input()\r\n  variant: 'text' | 'email' | 'password'| 'search' = 'text';\r\n\r\n  /** Optional label */\r\n  @Input()\r\n  label: string = '';\r\n\r\n  /** Optional placeholder */\r\n  @Input()\r\n  placeholder: string = '';\r\n\r\n  // Uniquely generated ID for the instance\r\n  inputId: string = `input-${uuidv4()}`;\r\n\r\n  public get classes(): string[] {\r\n    return ['labdt-input']\r\n  }\r\n\r\n  public get type(): string {\r\n    switch (this.variant) {\r\n      case 'text':\r\n        return 'text';\r\n      case 'email':\r\n        return 'email';\r\n      case 'password':\r\n        return 'password';\r\n      case 'search':\r\n        return 'text';\r\n      default:\r\n        return 'text';\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./input.component.sass",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 28
                    }
                },
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "string",
                        "returnType": "string",
                        "line": 32
                    }
                }
            },
            "templateData": "<div [ngClass]=\"classes\">\r\n  <label *ngIf=\"label\" [for]=\"inputId\">{{ label }}</label>\r\n  <input [id]=\"inputId\" [placeholder]=\"placeholder\" [type]=\"type\">\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-b6cb7a21b224e72bdf84ab9fec7974cc41eea21bec3c17b489afe18e43ed9754146f0a105ae9d6890619cc1e4e2ad349bafe74bb63c9adf68f2649af6960a2d0",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleCredentialResponse",
                    "args": [
                        {
                            "name": "response",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "renderGoogleLoginButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "GoogleSigninButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { GoogleSigninButtonModule } from '@abacritt/angularx-social-login';\r\nimport { Component } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [GoogleSigninButtonModule],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.sass'\r\n})\r\nexport class LoginComponent {\r\n  ngOnInit(): void {\r\n    if (typeof window !== 'undefined') {\r\n      // Initialize Google Identity with cliend_id and callback\r\n      (window as any).google.accounts.id.initialize({\r\n        client_id: environment.googleClientId,\r\n        callback: this.handleCredentialResponse.bind(this),\r\n        context: 'signin',\r\n        ux_mode: 'popup',\r\n        auto_select: false,\r\n      });\r\n    }\r\n\r\n    this.renderGoogleLoginButton();\r\n  }\r\n\r\n  // Render Google's login button\r\n  renderGoogleLoginButton(): void {\r\n    if (typeof window !== 'undefined') {\r\n      (window as any).google.accounts.id.renderButton(\r\n        document.getElementById(\"buttonDiv\"),\r\n        {\r\n          type: \"standard\",\r\n          shape: \"pill\",\r\n          theme: \"outline\",\r\n          text: \"continue_with\",\r\n          size: \"large\",\r\n          logo_alignment: \"left\",\r\n          width: \"400\"\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  // Callback function\r\n  handleCredentialResponse(response: any) {\r\n    const token = response.credential;\r\n    console.log(\"Token ID:\", token);\r\n  }\r\n}\r\n",
            "styleUrl": "./login.component.sass",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div id=\"buttonDiv\"></div>\r\n"
        },
        {
            "name": "LoginModalComponent",
            "id": "component-LoginModalComponent-978e3742d29f85f971eedba18ae93aadb78628c246023a39cb3332803cf10807aa15cc794fd5ef30944cad491cb14d8eba2695a390801f55e89321294338e467",
            "file": "src/app/modals/login-modal/login-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs the modal currently active?",
                    "description": "<p>Is the modal currently active?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "subscription",
                    "defaultValue": "new Subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "BaseModalComponent",
                    "type": "component"
                },
                {
                    "name": "LogoComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "LoginComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { BaseModalComponent } from \"../base-modal/base-modal.component\";\r\nimport { CommonModule } from '@angular/common';\r\nimport { LogoComponent } from \"../../components/logo/logo.component\";\r\nimport { InputComponent } from \"../../components/input/input.component\";\r\nimport { ButtonComponent } from \"../../components/button/button.component\";\r\nimport { Subscription } from 'rxjs';\r\nimport { LoginModalService } from '../../services/login-modal.service';\r\nimport { LoginComponent } from \"../../components/login/login.component\";\r\n\r\n@Component({\r\n  selector: 'app-login-modal',\r\n  standalone: true,\r\n  imports: [CommonModule, BaseModalComponent, LogoComponent, InputComponent, ButtonComponent, LoginComponent],\r\n  templateUrl: './login-modal.component.html',\r\n  styleUrl: './login-modal.component.sass'\r\n})\r\nexport class LoginModalComponent {\r\n  /** Is the modal currently active? */\r\n  @Input()\r\n  isActive: boolean = false;\r\n\r\n  private subscription: Subscription = new Subscription;\r\n\r\n  constructor(private loginModalService: LoginModalService) { }\r\n\r\n  ngOnInit() {\r\n    this.subscription = this.loginModalService.isActive$.subscribe(\r\n      isActive => this.isActive = isActive\r\n    )\r\n\r\n    if (this.isActive) {\r\n      this.loginModalService.open();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  closeModal() {\r\n    this.loginModalService.close();\r\n  }\r\n}\r\n",
            "styleUrl": "./login-modal.component.sass",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginModalService",
                        "type": "LoginModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "loginModalService",
                        "type": "LoginModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-base-modal\r\n  [isActive]=\"isActive\"\r\n  [closeButton]=\"true\"\r\n  (onClose)=\"closeModal()\"\r\n>\r\n  <app-logo></app-logo>\r\n  <h1 class=\"header\">\r\n    Log in to continue\r\n  </h1>\r\n  <div class=\"expander\">\r\n    <app-input\r\n      [variant]=\"'email'\"\r\n      [label]=\"'Email'\"\r\n      [placeholder]=\"'your.email@mail.com'\"\r\n    ></app-input>\r\n  </div>\r\n  <div class=\"expander\">\r\n    <app-input\r\n      [variant]=\"'password'\"\r\n      [label]=\"'Password'\"\r\n    ></app-input>\r\n  </div>\r\n  <div class=\"password-forgot\">\r\n    Forgot your password?\r\n  </div>\r\n  <div class=\"expander\">\r\n    <app-button\r\n      [variant]=\"'primary'\"\r\n      [label]=\"'Log In'\"\r\n      [fill]=\"true\"\r\n    ></app-button>\r\n  </div>\r\n  <span class=\"or\">\r\n    OR\r\n  </span>\r\n  <div class=\"expander\">\r\n    <app-login></app-login>\r\n  </div>\r\n  <div class=\"expander\">\r\n    <p class=\"tos\">\r\n      By continuing you agree to LabDT’s <span class=\"highlight\">Terms of Service</span> and acknowledge you’ve read our <span class=\"highlight\">Privacy Policy</span>.\r\n    </p>\r\n    <p class=\"tos\">\r\n       <p>\r\n    <hr>\r\n    <p class=\"sign-up\">\r\n      Not on LabDT yet? Sign up\r\n    </p>\r\n  </div>\r\n</app-base-modal>\r\n"
        },
        {
            "name": "LogoComponent",
            "id": "component-LogoComponent-8c51ab9e558a3aa0754b906c3680b300de31d66bb48a358be4192effbb33b31f76504b239266c5f0b3b69345e3aa001bdb1d7be8e54126c2a57296ea6bbe9569",
            "file": "src/app/components/logo/logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-logo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./logo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-logo',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './logo.component.html',\r\n  styleUrl: './logo.component.sass'\r\n})\r\nexport class LogoComponent {\r\n  /** Optional click handler */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n}\r\n",
            "styleUrl": "./logo.component.sass",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div (click)=\"onClick.emit($event)\">\r\n  <img src=\"/logo.svg\" alt=\"LabDT Logo\">\r\n  LabDT\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideClientHydration(),\r\n    {\r\n      provide: 'SocialAuthServiceConfig',\r\n      useValue: {\r\n        autoLogin: false,\r\n        providers: [\r\n          {\r\n            id: GoogleLoginProvider.PROVIDER_ID,\r\n            provider: new GoogleLoginProvider(environment.googleClientId)\r\n          },\r\n        ],\r\n        onError: (err) => {\r\n          console.error(err);\r\n        }\r\n      } as SocialAuthServiceConfig,\r\n    },\r\n  ]\r\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  googleClientId: '513029206696-cne70a32e488cfk87ls98g6e1rk5sbpu.apps.googleusercontent.com',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.production.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  googleClientId: '',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  googleClientId: '',\n}"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering()\r\n  ]\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideClientHydration(),\r\n    {\r\n      provide: 'SocialAuthServiceConfig',\r\n      useValue: {\r\n        autoLogin: false,\r\n        providers: [\r\n          {\r\n            id: GoogleLoginProvider.PROVIDER_ID,\r\n            provider: new GoogleLoginProvider(environment.googleClientId)\r\n          },\r\n        ],\r\n        onError: (err) => {\r\n          console.error(err);\r\n        }\r\n      } as SocialAuthServiceConfig,\r\n    },\r\n  ]\r\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering()\r\n  ]\r\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  googleClientId: '513029206696-cne70a32e488cfk87ls98g6e1rk5sbpu.apps.googleusercontent.com',\n}"
                }
            ],
            "src/environments/environment.production.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.production.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  googleClientId: '',\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  googleClientId: '',\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 18,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/logo/logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/modals/base-modal/base-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseModalComponent",
                "coveragePercent": 70,
                "coverageCount": "7/10",
                "status": "good"
            },
            {
                "filePath": "src/app/modals/login-modal/login-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginModalComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/login-modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginModalService",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.production.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}